This is a public code of my paper:
    Optimization of Functional Bootstraps with Large LUT and Packing Key Switching
which published on EAI SecureComm 2023.

We speed up the calculation of FBT with large LUT or highly precise functions in fully homomorphic setting by optimizing the TreeFB algorithm.
We accelerate the calculation of TreeFB by compressing 2^ϑ· B instead of B TLWE ciphertext into one TRLWE ciphertext after the first layer in TreeFB.
Therefore, we can extract the 2^ϑ instead of one samples required for the next layer in only one bootstrapping by using the BML algorithm. So we reduce
the number of bootstrappings and Key Switching required for the TreeFB algorithm and without adding the error variance of output. We call it TreeBML algorithm.

we propose a new TLWE-to-TRLWE Packing Key Switching algorithm that reduces the key-switching key size of the Base-aware-KS. We have observed 
that it is necessary to generate key-switching key ciphertexts of polynomials with the same non-zero coefficient values but only those values located
in different slots in the Base-aware-KS algorithm. Therefore, for these key-switching key ciphertexts, we only generate one ciphertext and perform homomorphic 
rotation operations when needed, which effectively reducing theciphertext size of the key-switching key. 
We call it the Base-rotate TLWE-to-TRLWE Packing Key Switching(Rotate-based KS) algorithm.
  
We analyze the error variance and rate of our Tree-BML algorithm and
Rotate-based KS algorithm and compare with others. The Tree-BML and
Rotate-based KS algorithm does not add error variance of output. We verify
our conclusion about error variance and rate through experiment. We also
experiment for various functions with different parameters setting, such as
LUT, 32-bit integer comparison and Relu, and compared the performance
results of our algorithms with existing algorithms. Our Tree-BML algorithm
reduce the running time of the TreeFB algorithm by 72.09% when ϑ = 2 and
torus base B = 4. Our Rotate-based KS algorithm reduce the key-switching
key size of Base-aware-KS by 75%
